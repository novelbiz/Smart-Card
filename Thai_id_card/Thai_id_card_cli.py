# -*- coding: utf-8 -*-
"""
# Copyright 2025 NOVELBIZ CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""

from smartcard.System import readers
from smartcard.CardType import AnyCardType
from smartcard.CardRequest import CardRequest
from smartcard.Exceptions import NoCardException
from smartcard.util import toHexString
from smartcard.scard import SCARD_PROTOCOL_T0, SCARD_PROTOCOL_T1, SCARD_SHARE_SHARED
import subprocess
import time


class IDCardReader:
    """
    Thai National ID Card Reader
    
    A simple command-line tool to read data from Thai National ID Cards
    using a smart card reader.
    
    Author: Novelbiz (https://novelbiz.co.th)
    License: MIT
    """
    
    def __init__(self):
        self.cardservice = None
        print("\n" + "="*70)
        print(" "*15 + "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢ - Novelbiz")
        print(" "*25 + "MIT License 2025")
        print("="*70)
        print("[‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô] ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("="*70 + "\n")

    # ------------------- Helper Functions -------------------
    def decode_text(self, data):
        """‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô text"""
        try:
            return bytes(data).decode('tis-620', errors='ignore').strip()
        except:
            return ''.join(chr(b) if b < 128 else '?' for b in data).strip()

    def send_apdu_with_get_response(self, connection, apdu):
        """‡∏™‡πà‡∏á APDU command ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ GET_RESPONSE"""
        response, sw1, sw2 = connection.transmit(apdu)
        if sw1 == 0x61:
            get_response = [0x00, 0xC0, 0x00, 0x00, sw2]
            response, sw1, sw2 = connection.transmit(get_response)
        return response, sw1, sw2

    def parse_thai_date(self, date_str):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYYMMDD ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        if date_str == '99999999':
            return "‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û", "LIFELONG"
            
        if len(date_str) == 8 and date_str.isdigit():
            try:
                year = date_str[0:4]
                month = date_str[4:6]
                day = date_str[6:8]
                
                thai_year = int(year)
                eng_year = thai_year - 543
                
                thai_months = ['', '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                            '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
                
                eng_months = ['', 'January', 'February', 'March', 'April', 'May', 'June',
                            'July', 'August', 'September', 'October', 'November', 'December']
                
                month_int = int(month)
                if 1 <= month_int <= 12:
                    thai_date = f"{int(day)} {thai_months[month_int]} {thai_year}"
                    eng_date = f"{int(day)} {eng_months[month_int]} {eng_year}"
                    return thai_date, eng_date
            except Exception as e:
                print(f"[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "Not specified"
        else:
            return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "Not specified"

    def disconnect_card(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£"""
        if self.cardservice:
            try:
                self.cardservice.connection.disconnect()
                print("[‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠] ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                print(f"[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
            finally:
                self.cardservice = None

    # ------------------- Card Reader Functions -------------------
    def check_service_status(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Smart Card Service"""
        try:
            result = subprocess.run(
                ["sc", "query", "SCardSvr"],
                capture_output=True, text=True, shell=True
            )
            return "RUNNING" in result.stdout
        except Exception as e:
            print(f"[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Service ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return False

    def check_reader_status(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£"""
        if not self.check_service_status():
            print("[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞] ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Smart Card ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            return False

        r = readers()
        if r:
            print(f"[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞] ‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£: {r[0]}")
            return True
        else:
            print("[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£")
            return False

    # ------------------- Read ID Card -------------------
    def read_id_card(self):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"""
        print("\n" + "="*70)
        print("[‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô...")
        print("="*70)
        
        try:
            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            self.disconnect_card()
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£
            cardtype = AnyCardType()
            cardrequest = CardRequest(timeout=5, cardType=cardtype)
            self.cardservice = cardrequest.waitforcard()
            
            print(f'\n[‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö: {self.cardservice.connection.getReader()}')
            
            try:
                self.cardservice.connection.connect(
                    protocol=SCARD_PROTOCOL_T0 | SCARD_PROTOCOL_T1,
                    mode=SCARD_SHARE_SHARED
                )
                atr = self.cardservice.connection.getATR()
                print(f'[ATR] {toHexString(atr)}')
            except Exception as e:
                print(f"[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ: {e}")
                self.disconnect_card()
                return False
       
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Thai ID card applet
            SELECT = [0x00, 0xA4, 0x04, 0x00, 0x08]
            THAI_ID_CARD = [0xA0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x01]
            response, sw1, sw2 = self.cardservice.connection.transmit(SELECT + THAI_ID_CARD)
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ GET RESPONSE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SW 61
            if sw1 == 0x61:
                print(f"[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°... (SW: {sw1:02x} {sw2:02x})")
                get_response = [0x00, 0xC0, 0x00, 0x00, sw2]
                response, sw1, sw2 = self.cardservice.connection.transmit(get_response)
            
            if sw1 != 0x90:
                print(f"[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Applet ‡πÑ‡∏î‡πâ SW: {sw1:02x} {sw2:02x}")
                self.disconnect_card()
                return False
            
            print(f"[‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Thai ID Applet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (SW: {sw1:02x} {sw2:02x})")

            # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
            commands = {
                'cid': [0x80, 0xb0, 0x00, 0x04, 0x02, 0x00, 0x0d],
                'name_th': [0x80, 0xb0, 0x00, 0x11, 0x02, 0x00, 0x64],
                'name_en': [0x80, 0xb0, 0x00, 0x75, 0x02, 0x00, 0x64],
                'birth': [0x80, 0xb0, 0x00, 0xD9, 0x02, 0x00, 0x08],
                'gender': [0x80, 0xb0, 0x00, 0xE1, 0x02, 0x00, 0x01],
                'issuer': [0x80, 0xb0, 0x00, 0xF6, 0x02, 0x00, 0x64],
                'issue_date': [0x80, 0xb0, 0x01, 0x67, 0x02, 0x00, 0x08],
                'expire_date': [0x80, 0xb0, 0x01, 0x6F, 0x02, 0x00, 0x08],
                'address': [0x80, 0xb0, 0x15, 0x79, 0x02, 0x00, 0x64],
                'request_number': [0x80, 0xB0, 0x16, 0x19, 0x02, 0x00, 0x0E]
            }

            print("\n" + "-"*70)
            print(" "*25 + "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
            print("-"*70)

            # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['cid']
            )
            cid = self.decode_text(response)
            print(f"\nüìå ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: {cid}")

            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢)
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['name_th']
            )
            name_th = self.decode_text(response).replace('#', ' ')
            print(f"üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢): {name_th}")

            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['name_en']
            )
            name_en = self.decode_text(response).replace('#', ' ')
            print(f"üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): {name_en}")

            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['birth']
            )
            birth_raw = self.decode_text(response)
            birth_th, birth_en = self.parse_thai_date(birth_raw)
            print(f"üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡πÑ‡∏ó‡∏¢): {birth_th}")
            print(f"üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): {birth_en}")

            # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏®
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['gender']
            )
            gender_code = self.decode_text(response)
            gender = "‡∏ä‡∏≤‡∏¢" if gender_code == "1" else "‡∏´‡∏ç‡∏¥‡∏á" if gender_code == "2" else gender_code
            print(f"‚öß ‡πÄ‡∏û‡∏®: {gender}")

            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['issue_date']
            )
            issue_raw = self.decode_text(response)
            issue_th, issue_en = self.parse_thai_date(issue_raw)
            print(f"\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ (‡πÑ‡∏ó‡∏¢): {issue_th}")
            print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): {issue_en}")

            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['expire_date']
            )
            expire_raw = self.decode_text(response)
            expire_th, expire_en = self.parse_thai_date(expire_raw)
            print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÑ‡∏ó‡∏¢): {expire_th}")
            print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): {expire_en}")
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['issuer']
            )
            issuer_name = self.decode_text(response)
            print(f"üè¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£: {issuer_name}")
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['address']
            )
            address = self.decode_text(response).replace('#', ' ')
            print(f"\nüè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {address}")
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠
            response, sw1, sw2 = self.send_apdu_with_get_response(
                self.cardservice.connection, commands['request_number']
            )
            request_number = self.decode_text(response)
            print(f"üî¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠: {request_number}")

            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
            self.disconnect_card()
            
            print("\n" + "="*70)
            print("[‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            print("="*70 + "\n")
            return True
            
        except NoCardException:
            print("\n[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            self.disconnect_card()
            return False
        except Exception as e:
            print(f"\n[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£: {e}")
            self.disconnect_card()
            return False

    # ------------------- Main Loop -------------------
    def run(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡πà‡∏≠‡∏ô
        if not self.check_reader_status():
            print("\n[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà")
            return
        
        print("\n[‡∏û‡∏£‡πâ‡∏≠‡∏°] ‡πÉ‡∏™‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            if self.read_id_card():
                print("\n[‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô] ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
            else:
                print("\n[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                
        except KeyboardInterrupt:
            print("\n\n[‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        except Exception as e:
            print(f"\n[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


# ------------------- Main -------------------
if __name__ == "__main__":
    print("\n")
    print("*"*70)
    print("*" + " "*68 + "*")
    print("*" + " "*10 + "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢ (CLI Version)" + " "*19 + "*")
    print("*" + " "*25 + "by Novelbiz" + " "*34 + "*")
    print("*" + " "*22 + "MIT License 2025" + " "*33 + "*")
    print("*" + " "*68 + "*")
    print("*"*70)
    
    try:
        reader = IDCardReader()
        reader.run()
    except KeyboardInterrupt:
        print("\n\n[‡∏≠‡∏≠‡∏Å] ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n[‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á] {e}")
    finally:
        print("\n" + "="*70)
        print("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏≤‡∏Å Novelbiz")
        print("Website: https://novelbiz.co.th")
        print("="*70 + "\n")
