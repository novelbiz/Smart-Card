
# -*- Thai ID Smart Card Reader with Face Recognition -*- 

from PyQt5.QtWidgets import (QApplication, QLabel, QPushButton, QMainWindow, 
                             QMessageBox, QCheckBox, QLineEdit, QGroupBox, 
                             QVBoxLayout, QHBoxLayout, QWidget, QFrame, QGridLayout,
                             QFileDialog, QProgressBar, QGraphicsDropShadowEffect)
from PyQt5.QtCore import QTimer, Qt, QLocale, QThread, pyqtSignal, QObject
from PyQt5.QtGui import QPixmap, QFont, QColor, QIcon, QImage ,QPalette
from smartcard.System import readers
from smartcard.CardMonitoring import CardMonitor, CardObserver
from smartcard.CardType import AnyCardType
from smartcard.CardRequest import CardRequest
from smartcard.Exceptions import NoCardException
from smartcard.util import toHexString
from smartcard.scard import SCARD_PROTOCOL_T0, SCARD_PROTOCOL_T1, SCARD_SHARE_SHARED
from deepface import DeepFace
import tempfile
import subprocess
import os
import io
from datetime import datetime
import numpy as np
import cv2
from PIL import ImageFont, ImageDraw, Image
import sqlite3
from database_viewer import DatabaseViewerWindow

try:
    from openpyxl import Workbook, load_workbook
    from openpyxl.drawing.image import Image as OpenpyxlImage
    from openpyxl.styles import Font, Alignment
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

class IDCardObserver(CardObserver):
    def __init__(self, window):
        self.window = window

    def update(self, observable, actions):
        (addedcards, removedcards) = actions
        if addedcards:
            self.window.on_card_inserted()
        if removedcards:
            self.window.on_card_removed()


class DeepFaceWorker(QThread):
    """Worker thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• DeepFace ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å UI"""
    result_signal = pyqtSignal(bool, float)  # verified, distance
    error_signal = pyqtSignal(str)  # error_message
    
    def __init__(self, card_photo_bytes, captured_frame, parent=None):
        super().__init__(parent)
        self.card_photo_bytes = card_photo_bytes
        self.captured_frame = captured_frame
        
    def run(self):
        """‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô background thread"""
        try:

            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as f:
                f.write(self.card_photo_bytes)
                card_path = f.name
                
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as f:
                cv2.imwrite(f.name, self.captured_frame)
                captured_path = f.name
            
            try:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DeepFace
                result = DeepFace.verify(
                    img1_path=card_path,
                    img2_path=captured_path,
                    model_name="Facenet512",
                    detector_backend="opencv",
                    enforce_detection=False,
                    align=True
                )
                
                verified = result["verified"]
                distance = result["distance"]
                
                # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
                self.result_signal.emit(verified, distance)
                
            finally:
                # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                try:
                    os.unlink(card_path)
                    os.unlink(captured_path)
                except:
                    pass
                    
        except Exception as e:
            self.error_signal.emit(str(e))
            
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.base_width = 870
        self.base_height = 870
        self.base_font_size = 13
        self.ui_ready = False 
        
        self.camera = None 
        self.webcam_label = None # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô setup_ui()
        self.is_face_scan_mode = False 
        self.captured_face_frame = None 
        self.current_data = {}
        self.cardservice = None
        self.current_reader = None

        self.face_cascade = cv2.CascadeClassifier(
            cv2.data.haarcascades + 'haarcascade_frontalface_default.xml') 
        
        # üìåüìå ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô __init__ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
        if self.face_cascade.empty():
            print("FATAL ERROR: Haar Cascade XML file not found or failed to load!")
            self.face_cascade = None # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô None ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î update_frame ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ

         
        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebCam (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°)
        self.webcam_timer = QTimer(self)
        self.webcam_timer.timeout.connect(self.update_frame) # üìå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        
        # Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Card Reader Status
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_reader_status)
        self.timer.start(2000) # ‡πÄ‡∏£‡∏¥‡πà‡∏° Timer ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Card Reader
        
        documents_path = os.path.join(os.path.expanduser('~'), 'Documents')
        target_path = os.path.join(documents_path, 'Novelbiz')
        self.folder_path = QLineEdit(target_path)
        
        main_data_folder = os.path.join(self.folder_path.text(), "ID_Card_Data")
        if not os.path.exists(main_data_folder):
            os.makedirs(main_data_folder, exist_ok=True)
            
        self.db_name = os.path.join(main_data_folder, 'id_card_data.db')
        self.init_db() 
                
        icon_path = os.path.join(os.path.dirname(__file__), "logo.png")
        self.setWindowIcon(QIcon(icon_path))
        self.setWindowTitle("Thai_ID_Card_Reader.v1.4_FaceRec")
        
        self.setGeometry(100, 50, 900, 900)        
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MainWindow + QPushButton
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f0f4f8;
            }
          
            QGroupBox {
                background: #ffffff;
                border: 1px solid #e5e7eb;
                border-radius: 12px;
                margin-top: 16px;
                padding: 16px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 6px;
                font-weight: bold;
                color: #1e40af;
                font-size: 16px;
            }
            QPushButton {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                        stop:0 #60a5fa, stop:0.5 #3b82f6, stop:1 #2563eb);
                            border: 1px solid #1e40af;
                            border-radius: 8px;
                            color: white;
                            font-size: 13px;
                            font-weight: bold;
                            padding: 6px 14px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                            stop:0 #2563eb, stop:1 #1d4ed8);
            }
            QPushButton:pressed {
                background-color: #1e3a8a;
            }
            QPushButton:disabled {
                background: #cbd5e0;
                color: #94a3b8;
            }
        """)
        
      
        self.setup_ui()  
        self.start_webcam()            
        self.update_reader_status()            
        # Card monitoring
        self.cardmonitor = CardMonitor()
        self.cardobserver = IDCardObserver(self)
        self.cardmonitor.addObserver(self.cardobserver)

     

    # ------------------- UI Setup -------------------
    def setup_ui(self):
        # ‡πÉ‡∏ä‡πâ layout ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á centering
        central_widget = QWidget()
        self.setCentralWidget(central_widget)    
        # Main layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(8)
        main_layout.setContentsMargins(15, 15, 15, 15)
        # Status frame
        status_frame = QFrame(self)
        status_frame.setFrameShape(QFrame.Box)
        status_frame.setStyleSheet("""
            QFrame {
                background-color: #f0f4f8;
                border-radius: 8px;
                padding: 4px;
            }
        """)
        
        status_layout = QHBoxLayout(status_frame)
        status_layout.setContentsMargins(2, 2, 2, 2)
        status_layout.setSpacing(5)
        font_small = QFont("Prompt", 9)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 10
        font_small.setBold(True)

        # Reader Status
        self.reader_label = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠...")
        self.reader_label.setFont(font_small)
        self.reader_label.setStyleSheet("color: blue;")

        # Card Status
        self.card_label = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£")
        self.card_label.setFont(font_small)
        self.card_label.setStyleSheet("color: red;")
        
        status_layout.addStretch()
        status_layout.addWidget(self.reader_label)
        status_layout.addWidget(self.card_label)
        status_layout.addStretch()       
        main_layout.addWidget(status_frame)    
          
        GROUP_HEIGHT = 210 
        # Data Layout
        data_layout = QHBoxLayout()
        data_layout.setSpacing(15)
        
        # Left: Personal Info
        left_layout = QVBoxLayout()
        group_font = QFont()
        group_font.setFamily("Prompt")
        group_font.setPointSize(10)  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î font
        group_font.setBold(True)

        # Personal Info Group (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á)
        personal_group = QGroupBox("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
        personal_group.setMinimumHeight(GROUP_HEIGHT)
        personal_group.setFont(group_font)
        personal_group.setStyleSheet("""
            QGroupBox {
                font-family: "Prompt";
                border: 1px solid #a6a6a6;
                border-radius: 8px;
                margin-top: 16px;
                padding: 12px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 5px;
                font-weight: bold;
                color: #3B82F6;
            }
            QLabel {
                font-family: "Prompt";
                font-size: 13px;
                line-height: 10px;
                margin: 0px;
                padding: 0px;
                color: #333333;
            }
        """)
        personal_layout = QVBoxLayout(personal_group)
        personal_layout.setSpacing(3)  # ‡∏•‡∏î spacing

        # CID & Gender
        self.cid_label = QLabel("‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô :")
        personal_layout.addWidget(self.cid_label)
        self.gender_label = QLabel("‡πÄ‡∏û‡∏® :")
        personal_layout.addWidget(self.gender_label)

        # Name
        self.name_th_label = QLabel("‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• :")
        personal_layout.addWidget(self.name_th_label)
        self.name_en_label = QLabel("‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (Eng) :")
        personal_layout.addWidget(self.name_en_label)

        # Birth
        self.birth_th_label = QLabel("‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡πÑ‡∏ó‡∏¢) :")
        personal_layout.addWidget(self.birth_th_label)
        self.birth_en_label = QLabel("‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (Eng) :") 
        personal_layout.addWidget(self.birth_en_label)

        # Address
        self.address_label = QLabel("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà :")
        self.address_label.setWordWrap(True)
        personal_layout.addWidget(self.address_label)
        personal_layout.addStretch()
        left_layout.addWidget(personal_group, 1)

        # Card Info Group (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î)
        address_group = QGroupBox("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£")
        address_group.setMinimumHeight(GROUP_HEIGHT)
        address_group.setFont(group_font)
        address_group.setStyleSheet("""
            QGroupBox {
                font-family: "Prompt";
                border: 1px solid #a6a6a6;
                border-radius: 8px;
                margin-top: 16px;
                padding: 12px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 5px;
                font-weight: bold;
                color: #3B82F6;
            }
            QLabel {
                font-family: "Prompt";
                font-size: 13px;
                line-height: 10px;
                margin: 0px;
                padding: 0px;
                color: #333333;
            }
        """)

        address_layout = QGridLayout(address_group)
        address_layout.setSpacing(1)
        address_layout.setContentsMargins(6, 6, 6, 6)

        self.issue_date_label = QLabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ :")
        self.issue_date_en_label = QLabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ (Eng) :")
        self.expire_date_label = QLabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ :")
        self.expire_date_en_label = QLabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Eng) :")
        self.issuer_label = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ :")
        self.issuer_label.setWordWrap(True)

        address_layout.addWidget(self.issue_date_label, 0, 0)
        address_layout.addWidget(self.issue_date_en_label, 1, 0)
        address_layout.addWidget(self.expire_date_label, 2, 0)
        address_layout.addWidget(self.expire_date_en_label, 3, 0)
        address_layout.addWidget(self.issuer_label, 4, 0, 1, 1)
        address_layout.setRowStretch(5, 1)
        
        left_layout.addWidget(address_group, 1)

        # Right: Photo & Webcam (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î)
        right_layout = QVBoxLayout()
        right_layout.setContentsMargins(0, 10, 0, 0)
        right_layout.setSpacing(8)
        
        # ‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£ (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î)
        self.photo_label = QLabel()
        self.photo_label.setMinimumSize(240, 200)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 300x240
        self.photo_label.setStyleSheet("""
            border: 2px dashed #a6a6a6;
            background-color: #ffffff;
            border-radius: 8px;
        """)
        self.photo_label.setAlignment(Qt.AlignCenter)
        self.photo_label.setText("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
        right_layout.addWidget(self.photo_label, 1)
        
        # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠
        self.request_number_label = QLabel("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£ :")
        self.request_number_label.setAlignment(Qt.AlignCenter)
        self.request_number_label.setStyleSheet("font-size: 13px; font-weight: normal; color: #555555;")
        right_layout.addWidget(self.request_number_label)
                    
        # ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏° (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î)
        self.webcam_label = QLabel()
        self.webcam_label.setMinimumSize(240, 170)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 300x220
        self.webcam_label.setStyleSheet("""
            border: 2px solid #3B82F6;
            background-color: #f0f4f8;
            border-radius: 8px;
        """)
        self.webcam_label.setAlignment(Qt.AlignCenter)
        self.webcam_label.setText("‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°")
        right_layout.addWidget(self.webcam_label, 1)
        
        right_layout.addStretch()

        data_layout.addLayout(left_layout, 3)
        data_layout.addLayout(right_layout, 2)
        
        main_layout.addLayout(data_layout)

        # Log Group (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á)
        log_group = QGroupBox("Smart Card Data Options")
        log_group.setFont(group_font)
        log_group.setStyleSheet("""
            QGroupBox {
                font-family: "Prompt";
                border: 1px solid #a6a6a6;
                border-radius: 8px;
                margin-top: 16px;
                padding: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 2px 5px;
                font-weight: bold;
                color: #3B82F6;
            }
            QLabel {
                font-family: "Prompt";
                font-size: 13px;
                color: #333333;
            }
        """)
        log_layout = QVBoxLayout(log_group)
        log_layout.setSpacing(5)

        # Folder selection
        folder_layout = QHBoxLayout()
        folder_layout.setSpacing(8)
        folder_layout.addWidget(QLabel("Folder :"))
        
        documents_path = os.path.join(os.path.expanduser('~'), 'Documents')
        target_path = os.path.join(documents_path, 'Novelbiz')
        self.folder_path = QLineEdit(target_path)
        
        self.folder_path.setStyleSheet("""
            QLineEdit {
                background: #ffffff;
                border: 1px solid #cbd5e0;
                border-radius: 6px;
                padding: 4px 10px;
                font-size: 12px;
                color: #1f2937;
            }
            QLineEdit:focus {
                border: 1px solid #3b82f6;
                background: #f0f9ff;
            }
        """)
        folder_layout.addWidget(self.folder_path)
        
        browse_btn = QPushButton("Browse")
        browse_btn.setFixedSize(80, 28)
        browse_btn.clicked.connect(self.browse_folder)
        folder_layout.addWidget(browse_btn)
        log_layout.addLayout(folder_layout)

        # Data type checkboxes
        data_layout_cb = QHBoxLayout()
        data_layout_cb.addWidget(QLabel("Data :"))
        self.text_file_cb = QCheckBox("Text File"); self.text_file_cb.setChecked(True)
        self.excel_file_cb = QCheckBox("Excel File"); self.excel_file_cb.setChecked(True)
        self.image_cb = QCheckBox("Image"); self.image_cb.setChecked(True)
        self.sqlite_cb = QCheckBox("DB"); self.sqlite_cb.setChecked(True)
        for cb in [self.text_file_cb, self.excel_file_cb, self.image_cb, self.sqlite_cb]:
            cb.setStyleSheet("font-family: 'Prompt'; font-size: 12px; color: #333333;")
        data_layout_cb.addWidget(self.text_file_cb)
        data_layout_cb.addWidget(self.excel_file_cb)
        data_layout_cb.addWidget(self.image_cb)
        data_layout_cb.addWidget(self.sqlite_cb)
        log_layout.addLayout(data_layout_cb)

        log_layout_container = QHBoxLayout()
        log_layout_container.addWidget(log_group, 3)  # 3 = ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤ left_layout
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° QGroupBox ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ log_group
        
        new_group = QGroupBox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤")
        new_group.setFont(group_font)
        new_group.setStyleSheet("""
            QGroupBox {
                font-family: "Prompt";
                border: 1px solid #a6a6a6;
                border-radius: 8px;
                margin-top: 16px;
                padding: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                padding: 2px 5px;
                font-weight: bold;
                color: #3B82F6;
            }
        """)
        new_layout = QVBoxLayout(new_group)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.face_verify_status = QLabel("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        self.face_verify_status.setAlignment(Qt.AlignCenter)
        self.face_verify_status.setStyleSheet("""
            font-size: 14px;
            font-weight: bold;
            color: #6B7280;
            padding: 10px;
        """)
        new_layout.addWidget(self.face_verify_status)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Progress Bar
        self.face_progress = QProgressBar()
        self.face_progress.setVisible(False)  # ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        self.face_progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid #3B82F6;
                border-radius: 5px;
                text-align: center;
                font-size: 12px;
            }
            QProgressBar::chunk {
                background-color: #3B82F6;
            }
        """)
        self.face_progress.setFormat("%p%") 
        self.face_progress.setLocale(QLocale.c()) 
        new_layout.addWidget(self.face_progress)        
        log_layout_container.addWidget(new_group, 2)  # 2 = ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏ó‡πà‡∏≤ right_layout)
        main_layout.addLayout(log_layout_container)
        


        # Buttons (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î)
        button_layout = QHBoxLayout()
        button_layout.setSpacing(8)
        button_layout.addStretch()
        self.read_button = QPushButton("Read ID Card")
        self.read_button.setEnabled(False)
        self.read_button.clicked.connect(self.read_id_card)

        # <<< ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• >>>
        self.save_button = QPushButton("Save") # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
        self.save_button.setEnabled(False) # ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.save_button.clicked.connect(self.save_data) # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô self.save_data        
        
        self.scan_face_button = QPushButton("Face scan")
        self.scan_face_button.setEnabled(False)
        self.scan_face_button.clicked.connect(self.scan_and_compare_face)
        
        self.clear_button = QPushButton("Clear")
        self.clear_button.clicked.connect(self.clear_data)
        
        self.exit_button = QPushButton("Exit")
        self.exit_button.clicked.connect(self.exit_application)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.view_db_button = QPushButton("‡∏î‡∏π‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        self.view_db_button.clicked.connect(self.open_database_viewer)
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç loop ‡∏õ‡∏∏‡πà‡∏°
        for btn in [self.read_button, self.scan_face_button, self.save_button, 
                    self.view_db_button, self.clear_button, self.exit_button]:
            btn.setFixedSize(120, 35)
            button_layout.addWidget(btn)

        button_layout.addStretch()
        


        bottom_section_layout = QHBoxLayout()
        bottom_section_layout.addLayout(button_layout)
        
        main_layout.addLayout(bottom_section_layout)
        
        self.ui_ready = True
        self.update_fonts(self.base_font_size)
        
    # ------------------- Helper -------------------
    def set_label_style(self, labels, font_size=12, bold=False):
        style = f"font-size:{font_size}px;{' font-weight:bold;' if bold else ''}; color:#222222;"
        for lbl in labels:
            lbl.setStyleSheet(style)

    def browse_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Folder")
        if folder:
            self.folder_path.setText(folder)

    # ------------------- Service & Reader -------------------
    def start_service(self):
        try:
            # ‡∏™‡∏±‡πà‡∏á start service
            subprocess.run(["sc", "start", "SCardSvr"], capture_output=True, text=True, shell=True)
            QMessageBox.information(self, "Service", "Smart Card Service started (if available).")

        except Exception as e:
            QMessageBox.critical(self, "Error", f"Cannot start service: {e}")
           
    def check_service_status(self):
        try:
            result = subprocess.run(
                ["sc", "query", "SCardSvr"],
                capture_output=True, text=True, shell=True
            )
            return "RUNNING" in result.stdout
        except Exception as e:
            print(f"Service check error: {e}")
            return False

    def update_reader_status(self):
        if not self.check_service_status():
            self.reader_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Smart Card ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            self.reader_label.setStyleSheet("font-weight: bold; color: orange;")
            self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            self.card_label.setStyleSheet("font-weight: bold; color: red;")
            self.read_button.setEnabled(False)
            return

        r = readers()
        if r:
            self.current_reader = r[0]
            self.reader_label.setText(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
            self.reader_label.setStyleSheet("font-weight: bold; color: green;")
        else:
            self.current_reader = None
            self.reader_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô")
            self.reader_label.setStyleSheet("font-weight: bold; color: red;")
            self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£")
            self.card_label.setStyleSheet("font-weight: bold; color: red;")
            self.read_button.setEnabled(False)

    # ------------------- Card Insert/Remove -------------------
    def on_card_inserted(self):
        self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡πÉ‡∏™‡πà‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß")
        self.card_label.setStyleSheet("font-weight: bold; color: green;")
        self.read_button.setEnabled(True)            
        
            
    def on_card_removed(self):
        self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£")
        self.card_label.setStyleSheet("font-weight: bold; color: red;")
        self.read_button.setEnabled(False)
        self.scan_face_button.setEnabled(False)
        self.clear_data()

    # ------------------- Decode & Parse -------------------
    def decode_text(self, data):
        try:
            return bytes(data).decode('tis-620', errors='ignore').strip()
        except:
            return ''.join(chr(b) if b < 128 else '?' for b in data).strip()

    def send_apdu_with_get_response(self, connection, apdu):
        """Send APDU and handle GET_RESPONSE if needed"""
        response, sw1, sw2 = connection.transmit(apdu)
        if sw1 == 0x61:
            get_response = [0x00, 0xC0, 0x00, 0x00, sw2]
            response, sw1, sw2 = connection.transmit(get_response)
        return response, sw1, sw2

    def parse_thai_date(self, date_str):
            """Parse Thai date format (YYYYMMDD) and convert to readable format"""
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô 99999999 ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û / LIFELONG
            if date_str == '99999999':
                return "‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û", "LIFELONG"
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            if len(date_str) == 8 and date_str.isdigit():
                try:
                    year = date_str[0:4]
                    month = date_str[4:6]
                    day = date_str[6:8]
                    
                    # Convert Buddhist year to Christian year for English
                    thai_year = int(year)
                    eng_year = thai_year - 543
                    
                    # Thai month names
                    thai_months = ['', '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                                '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°']
                    
                    eng_months = ['', 'January', 'February', 'March', 'April', 'May', 'June',
                                'July', 'August', 'September', 'October', 'November', 'December']
                    
                    month_int = int(month)
                    if 1 <= month_int <= 12:
                        thai_date = f"{int(day)} {thai_months[month_int]} {thai_year}"
                        eng_date = f"{int(day)} {eng_months[month_int]} {eng_year}"
                        return thai_date, eng_date
                except Exception as e:
                    print(f"Date parsing error: {e}")
                    return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "Not specified"
            else:
                # ‡∏´‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "Not specified"          

    def disconnect_card(self):
        """Safely disconnect from card"""
        if self.cardservice:
            try:
                self.cardservice.connection.disconnect()
                print("Card disconnected successfully")
            except Exception as e:
                print(f"Error disconnecting card: {e}")
            finally:
                self.cardservice = None

    # ------------------- Face Recognition -------------------
    def compare_faces(self, captured_frame, face_cascade):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ DeepFace ‡πÉ‡∏ô Worker Thread"""
        
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        if not self.current_data:
            QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡πà‡∏≠‡∏ô")
            return
            
        if 'photo' not in self.current_data:
            QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ö‡∏±‡∏ï‡∏£\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            return
        
        if self.current_data['photo'] is None or len(self.current_data['photo']) == 0:
            QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            return

        # ‡πÅ‡∏™‡∏î‡∏á progress bar
        self.face_progress.setVisible(True)
        self.face_progress.setValue(0)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GUI
        self.face_verify_status.setText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ DeepFace... (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠)")
        self.face_verify_status.setStyleSheet(
            "font-size: 14px; font-weight: bold; color: #F59E0B; padding: 10px;"
        )
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Worker
            card_photo_bytes = self.current_data['photo']
            success, encoded_image = cv2.imencode('.jpg', captured_frame)
            if success:
                captured_photo_bytes = encoded_image.tobytes()
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô current_data
                self.current_data['captured_face_photo'] = captured_photo_bytes
                print("‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")        
            
            
            self.face_worker = DeepFaceWorker(
                card_photo_bytes, 
                captured_frame,
                parent=self
            )
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Signals
            self.face_worker.result_signal.connect(self.handle_face_result)
            self.face_worker.error_signal.connect(self.handle_face_error)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            self.face_worker.start()
            
        except Exception as e:
            self.face_progress.setVisible(False)
            self.face_verify_status.setText("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            self.face_verify_status.setStyleSheet(
                "font-size: 14px; font-weight: bold; color: #EF4444; padding: 10px;"
            )
            QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ:\n{str(e)}")
            
    def handle_face_result(self, verified, distance):
        """‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Worker (DeepFace) ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GUI + ‡πÅ‡∏™‡∏î‡∏á QMessageBox"""
        
        cid = self.current_data.get('cid', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        name_th = self.current_data.get('name_th', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á
        similarity_percent = max(0, (1 - distance) * 100) 
        
        if verified:
            # ‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            self.face_verify_status.setText("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
            self.face_verify_status.setStyleSheet(
                "font-size: 14px; font-weight: bold; color: #10B981; padding: 10px;"
            )
                    # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
            self.save_button.setEnabled(True)
            print("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡πÅ‡∏•‡πâ‡∏ß")
            QMessageBox.information(
                self, "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                f"<h3 style='color: green;'>‚úî ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</h3>"
                f"<b>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô:</b> {similarity_percent:.1f}%<br>"
                f"<b>Distance:</b> {distance:.4f}<br><br>"
                f"<b>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£:</b> {cid}<br>"
                f"<b>‡∏ä‡∏∑‡πà‡∏≠:</b> {name_th}"
            )
        else:
            # ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            self.face_verify_status.setText("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
            self.face_verify_status.setStyleSheet(
                "font-size: 14px; font-weight: bold; color: #EF4444; padding: 10px;"
            )
            self.save_button.setEnabled(True)
            print("‚ùå ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á - ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Save")            
            QMessageBox.warning(
                self, "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                f"<h3 style='color: red;'>‚úó ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</h3>"
                f"<b>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô:</b> {similarity_percent:.1f}%<br>"
                f"<b>Distance:</b> {distance:.4f}<br><br>"
                f"<b>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£:</b> {cid}<br>"
                f"<b>‡∏ä‡∏∑‡πà‡∏≠:</b> {name_th}<br><br>"
                f"<small>‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á</small>"
            )
            
        # ‡∏ã‡πà‡∏≠‡∏ô progress bar
        self.face_progress.setVisible(False)
            
    def handle_face_error(self, error_message):
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Worker"""
        self.face_verify_status.setText("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        self.face_verify_status.setStyleSheet(
            "font-size: 14px; font-weight: bold; color: #9D174D; padding: 10px;"
        )
        self.face_progress.setVisible(False)
        
        QMessageBox.critical(
            self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î DeepFace", 
            f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:\n{error_message}"
        )
    # ------------------- Read ID Card -------------------
    def read_id_card(self):
        try:
            # Disconnect any existing connection first
            self.disconnect_card()
            
            # Connect to card
            cardtype = AnyCardType()
            cardrequest = CardRequest(timeout=3, cardType=cardtype)
            self.cardservice = cardrequest.waitforcard()
            
            print(f'CONNECTED TO {self.cardservice.connection.getReader()}')
            try:
                self.cardservice.connection.connect(
                    protocol=SCARD_PROTOCOL_T0 | SCARD_PROTOCOL_T1,
                    mode=SCARD_SHARE_SHARED
                )
                print(f'CONNECTED TO {self.cardservice.connection.getReader()}')
                atr = self.cardservice.connection.getATR()
                print(f'ATR: {toHexString(atr)}')
            except Exception as e:
                print(f"Error connecting to card: {e}")
                self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                self.card_label.setStyleSheet("font-weight: bold; color: red;")
                self.disconnect_card()
                return
       
        
            # Select Thai ID card applet
            SELECT = [0x00, 0xA4, 0x04, 0x00, 0x08]
            THAI_ID_CARD = [0xA0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x01]
            response, sw1, sw2 = self.cardservice.connection.transmit(SELECT + THAI_ID_CARD)
            print(f'SELECT response: {toHexString(response)}, SW: {sw1:02x} {sw2:02x}')

            # Read data commands
            commands = {
                'cid': [0x80, 0xb0, 0x00, 0x04, 0x02, 0x00, 0x0d],
                'name_th': [0x80, 0xb0, 0x00, 0x11, 0x02, 0x00, 0x64],
                'name_en': [0x80, 0xb0, 0x00, 0x75, 0x02, 0x00, 0x64],
                'birth': [0x80, 0xb0, 0x00, 0xD9, 0x02, 0x00, 0x08],
                'gender': [0x80, 0xb0, 0x00, 0xE1, 0x02, 0x00, 0x01],
                'issuer': [0x80, 0xb0, 0x00, 0xF6, 0x02, 0x00, 0x64],
                'issue_date': [0x80, 0xb0, 0x01, 0x67, 0x02, 0x00, 0x08],
                'expire_date': [0x80, 0xb0, 0x01, 0x6F, 0x02, 0x00, 0x08],
                'address': [0x80, 0xb0, 0x15, 0x79, 0x02, 0x00, 0x64],
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£
                'request_number': [0x80, 0xB0, 0x16, 0x19, 0x02, 0x00, 0x0E]
            }            

            # Initialize data dictionary
            self.current_data = {}

            # Read CID
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['cid'])
            cid = self.decode_text(response)
            self.current_data['cid'] = cid
            self.cid_label.setText(f"‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô : <b>{cid}</b>")

            # Read Thai Name
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['name_th'])
            name_th = self.decode_text(response).replace('#', ' ')
            self.current_data['name_th'] = name_th
            self.name_th_label.setText(f"‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• : <b>{name_th}</b>")

            # Read English Name
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['name_en'])
            name_en = self.decode_text(response).replace('#', ' ')
            self.current_data['name_en'] = name_en
            self.name_en_label.setText(f"‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (Eng) : <b>{name_en}</b>")

            # Read Birth Date
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['birth'])
            birth_raw = self.decode_text(response)
            birth_th, birth_en = self.parse_thai_date(birth_raw)
            self.current_data['birth_th'] = birth_th
            self.current_data['birth_en'] = birth_en
            self.birth_th_label.setText(f"‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡πÑ‡∏ó‡∏¢) : <b>{birth_th}</b>")
            self.birth_en_label.setText(f"‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (Eng) : <b>{birth_en}</b>")

            # Read Gender
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['gender'])
            gender_code = self.decode_text(response)
            gender = "‡∏ä‡∏≤‡∏¢" if gender_code == "1" else "‡∏´‡∏ç‡∏¥‡∏á" if gender_code == "2" else gender_code
            self.current_data['gender'] = gender
            self.gender_label.setText(f"‡πÄ‡∏û‡∏® : <b>{gender}</b>")

            # Read Issue Date
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['issue_date'])
            issue_raw = self.decode_text(response)
            issue_th, issue_en = self.parse_thai_date(issue_raw)
            self.current_data['issue_date'] = issue_th
            self.current_data['issue_date_en'] = issue_en
            self.issue_date_label.setText(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ : <b>{issue_th}</b>")
            self.issue_date_en_label.setText(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ (Eng) : <b>{issue_en}</b>")

            # Read Expire Date
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['expire_date'])
            expire_raw = self.decode_text(response)
            expire_th, expire_en = self.parse_thai_date(expire_raw)
            self.current_data['expire_date'] = expire_th
            self.current_data['expire_date_en'] = expire_en
            self.expire_date_label.setText(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ : <b>{expire_th}</b>")
            self.expire_date_en_label.setText(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Eng) : <b>{expire_en}</b>")
            
            # Read Issuer (‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£)
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['issuer'])
            issuer_name = self.decode_text(response)
            self.current_data['issuer'] = issuer_name
            self.issuer_label.setText(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ : <b>{issuer_name}</b>")
            
            # Read Address/Issuer
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['address'])
            address = self.decode_text(response).replace('#', ' ')
            self.current_data['address'] = address
            self.address_label.setText(f"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà : <b>{address}</b>")
            
            # Read Request Number (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£)
            response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, commands['request_number'])
            request_number = self.decode_text(response)
            self.current_data['request_number'] = request_number
            self.request_number_label.setText(f"<b>{request_number}</b>")

            # Read Photo
            photo_data = b''
            for i in range(20):
                cmd = [0x80, 0xB0, 0x01 + i, 0x7B - i, 0x02, 0x00, 0xFF]
                try:
                    response, sw1, sw2 = self.send_apdu_with_get_response(self.cardservice.connection, cmd)
                    if sw1 == 0x90 and sw2 == 0x00:
                        photo_data += bytes(response)
                    else:
                        break
                except Exception as e:
                    print(f"Photo read error: {e}")
                    break

            if photo_data and len(photo_data) > 100:
                try:
                    pixmap = QPixmap()
                    if pixmap.loadFromData(photo_data):
                        scaled_pixmap = pixmap.scaled(
                            self.photo_label.size(), 
                            Qt.KeepAspectRatio, 
                            Qt.SmoothTransformation
                        )
                        self.photo_label.setPixmap(scaled_pixmap)
                        self.current_data['photo'] = photo_data
                        print("Photo loaded successfully")
                    else:
                        print("Failed to load photo from data")
                except Exception as e:
                    print(f"Photo display error: {e}")

            # Disconnect from card after reading
            self.disconnect_card()
            
            # Update status
            self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            self.card_label.setStyleSheet("font-weight: bold; color: green;")
            self.save_button.setEnabled(False) 
            
            # # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            if 'photo' in self.current_data:
                self.scan_face_button.setEnabled(True)
                print("Face scan button enabled")           
            
            
            
        except NoCardException:
            self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£ ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
            self.card_label.setStyleSheet("font-weight: bold; color: red;")
            self.scan_face_button.setEnabled(False)
            self.disconnect_card()
        except Exception as e:
            print(f"Error reading ID card: {e}")
            self.card_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            self.card_label.setStyleSheet("font-weight: bold; color: red;")
            self.scan_face_button.setEnabled(False)
            self.disconnect_card()        

        # ------------------- Save Data -------------------

    def save_data(self):
            """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Text, Excel, Image, SQLite)
            *‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å*"""


            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.current_data or not self.current_data.get('cid'):
                QMessageBox.warning(self, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (CID ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤)")
                return

            # ---------------- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Face Verification Status) ---------------- 
            print("DEBUG: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'{self.face_verify_status.text()}'")
            face_status_text = self.face_verify_status.text()
            print(f"DEBUG: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: '{face_status_text}'") 
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0=‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö, 1=‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£, 2=‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£)
            face_verified_status = 0 

            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            if face_status_text == "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô":
                face_verified_status = 1
                face_status_text = "‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
            elif face_status_text == "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô":
                face_verified_status = 2
                face_status_text = "‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
          
            
            # ---------------- (‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) ----------------
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Folder
            base_folder = self.folder_path.text()
            main_data_folder = os.path.join(base_folder, "ID_Card_Data")
            if not os.path.exists(main_data_folder):
                os.makedirs(main_data_folder)
                
            today = datetime.now()
            date_str = today.strftime("%d%m%Y")
            base_filename = f"{date_str}_ID_Card"
            
            # ---------------- 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Image) ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Path ----------------
            photo_filepath = ""
            image_success = False
            if self.image_cb.isChecked() and 'photo' in self.current_data:
                # ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: /ID_Card_Data/Photo/DDMMYYYY/
                photo_folder = os.path.join(main_data_folder, "Photo")
                if not os.path.exists(photo_folder):
                    os.makedirs(photo_folder)
                
                date_folder = os.path.join(photo_folder, date_str)
                if not os.path.exists(date_folder):
                    os.makedirs(date_folder)
                
                timestamp = datetime.now().strftime("%H%M%S")
                cid = self.current_data.get('cid', 'unknown')
                filename = f"{cid}_{timestamp}.jpg"
                photo_filepath = os.path.join(date_folder, filename)
                
                try:
                    with open(photo_filepath, 'wb') as f:
                        f.write(self.current_data['photo'])
                    print(f"Photo saved: {photo_filepath}")
                    image_success = True
                except Exception as e:
                    print(f"Error saving image: {e}")
                    QMessageBox.critical(self, "Image Save Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")
                    
            # ‡πÄ‡∏Å‡πá‡∏ö path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ save_to_sqlite ‡πÅ‡∏•‡∏∞ Text File ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ
            self.current_data['photo_path'] = photo_filepath

            # ---------------- 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á SQLite Database ----------------
            sqlite_success = False
            if self.sqlite_cb.isChecked():
                sqlite_success = self.save_to_sqlite(self.current_data, face_verified_status)
            
            if sqlite_success:
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡∏Ç‡∏≠‡∏á CID ‡∏ô‡∏µ‡πâ
                try:
                    conn = sqlite3.connect(self.db_name)
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM id_card_records WHERE cid = ?", 
                                (self.current_data['cid'],))
                    scan_count = cursor.fetchone()[0]
                    conn.close()
                    print(f"üìä CID {self.current_data['cid']} ‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {scan_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                except:
                    pass            
            # ---------------- 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Text File ----------------
            text_success = False
            if self.text_file_cb.isChecked():
                filename = f"{base_filename}.txt"
                filepath = os.path.join(main_data_folder, filename)
                file_exists = os.path.exists(filepath)
                try:
                    with open(filepath, 'a', encoding='utf-8') as f:
                        if file_exists:
                            f.write("\n" + "=" * 50 + "\n")
                        else:
                            f.write("Thai ID Card Data Log\n")
                            f.write("=" * 50 + "\n")
                            
                        f.write(f"Record Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                        f.write(f"Citizen ID: {self.current_data.get('cid', '')}\n")
                        f.write(f"Thai Name: {self.current_data.get('name_th', '')}\n")
                        f.write(f"English Name: {self.current_data.get('name_en', '')}\n")
                        f.write(f"Gender: {self.current_data.get('gender', '')}\n")
                        f.write(f"Birth Date (Thai): {self.current_data.get('birth_th', '')}\n")
                        f.write(f"Birth Date (Eng): {self.current_data.get('birth_en', '')}\n")
                        f.write(f"Issuer: {self.current_data.get('issuer', '')}\n")
                        f.write(f"Issue Date: {self.current_data.get('issue_date', '')}\n")
                        f.write(f"Expire Date: {self.current_data.get('expire_date', '')}\n")
                        f.write(f"Address: {self.current_data.get('address', '')}\n")
                        f.write(f"Request Number: {self.current_data.get('request_number', '')}\n")
                        f.write(f"Face Verify Status: {face_status_text}\n")
                        f.write(f"Photo Path: {photo_filepath}\n")
                    text_success = True
                except Exception as e:
                    print(f"Error saving text file: {e}")
                    QMessageBox.critical(self, "Text File Save Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Text File ‡πÑ‡∏î‡πâ: {e}")
                    
            # ---------------- 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel File ----------------
            excel_success = False
            if self.excel_file_cb.isChecked() and OPENPYXL_AVAILABLE:
                filename = f"{base_filename}.xlsx"
                filepath = os.path.join(main_data_folder, filename)
                
                try:
                    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                    def convert_to_short_date(full_date_str):
                        if not full_date_str or full_date_str in ("‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û"):
                            return full_date_str
                        try:
                            month_map = {
                                '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°': '1', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå': '2', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°': '3', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô': '4',
                                '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°': '5', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô': '6', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°': '7', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°': '8',
                                '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô': '9', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°': '10', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô': '11', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°': '12'
                            }
                            parts = full_date_str.split()
                            if len(parts) >= 3 and parts[1] in month_map:
                                return f"{parts[0]}/{month_map[parts[1]]}/{parts[2]}"
                        except:
                            pass
                        return full_date_str

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                    if os.path.exists(filepath):
                        try:
                            with open(filepath, 'r+b') as test_file:
                                pass 
                        except (PermissionError, IOError):
                            reply = QMessageBox.question(self, "‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", 
                                f"‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Excel)\n"
                                "‡∏Ñ‡∏•‡∏¥‡∏Å 'Retry' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß\n"
                                "‡∏Ñ‡∏•‡∏¥‡∏Å 'Cancel' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°",
                                QMessageBox.Retry | QMessageBox.Cancel)
                            if reply == QMessageBox.Retry:
                                try:
                                    with open(filepath, 'r+b') as test_file: pass
                                except (PermissionError, IOError):
                                    QMessageBox.warning(self, "‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", f"‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏¢‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î Excel ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                                    return 
                            else:
                                return 
                    
                    if os.path.exists(filepath):
                        workbook = load_workbook(filepath)
                        worksheet = workbook.active
                    else:
                        workbook = Workbook()
                        worksheet = workbook.active
                        worksheet.title = "ID Card Data"

                    # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                    last_row = 1
                    for row in range(1, worksheet.max_row + 1):
                        if worksheet[f'A{row}'].value and str(worksheet[f'A{row}'].value).startswith('No.'):
                            last_row = max(last_row, row)

                    if last_row == 1 and not worksheet['A1'].value:
                        new_entry_number = 1
                        start_row = 1
                    else:
                        last_entry_value = worksheet[f'A{last_row}'].value
                        new_entry_number = int(str(last_entry_value).replace('No.', '')) + 1 if last_entry_value and str(last_entry_value).startswith('No.') else 1
                        start_row = last_row + 8 

                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô
                    birth_short = convert_to_short_date(self.current_data.get('birth_th', ''))
                    issue_short = convert_to_short_date(self.current_data.get('issue_date', ''))
                    expire_short = convert_to_short_date(self.current_data.get('expire_date', ''))

                    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß
                    for i in range(7):
                        worksheet.row_dimensions[start_row + i].height = 16 

                    data_mapping = {
                        f'A{start_row}': f'No.{new_entry_number}',
                        f'A{start_row + 1}': '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', 
                        f'C{start_row + 1}': '‡∏ä‡∏∑‡πà‡∏≠', 
                        f'D{start_row + 1}': self.current_data.get('name_th', ''),
                        f'A{start_row + 2}': f"{self.current_data.get('cid', '')}", 
                        f'C{start_row + 2}': 'Name', 
                        f'D{start_row + 2}': self.current_data.get('name_en', ''),
                        f'B{start_row + 3}': '‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 
                        f'C{start_row + 3}': birth_short,
                        f'B{start_row + 4}': 'Address', 
                        f'C{start_row + 4}': self.current_data.get('address', ''),
                        f'A{start_row + 5}': '‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠', 
                        f'B{start_row + 5}': '‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', 
                        f'C{start_row + 5}': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£',
                        f'A{start_row + 6}': issue_short, 
                        f'B{start_row + 6}': expire_short, 
                        f'C{start_row + 6}': self.current_data.get('issuer', ''),
                        f'D{start_row + 3}': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤:',
                        f'E{start_row + 3}': face_status_text,
                        
                        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                        f'F{start_row}': '‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£',  # Header ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F
                        f'H{start_row}': '‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á',  # Header ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H
                    }

                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î font styles ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô cells (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                    title_font = Font(name='Aptos Narrow', bold=True, size=11)
                    label_font = Font(name='Aptos Narrow', size=11)
                    data_font = Font(name='TAptos Narrow', size=11)
                    id_font = Font(name='Aptos Narrow', size=11)

                    for cell_address, value in data_mapping.items():
                        worksheet[cell_address] = value
                        
                        if cell_address.startswith('A') and str(value).startswith('No.'):
                            worksheet[cell_address].font = title_font
                        elif cell_address == f'A{start_row + 2}':
                            worksheet[cell_address].font = id_font
                        elif any(label in cell_address for label in [f'A{start_row + 1}', f'C{start_row + 1}', f'C{start_row + 2}', f'B{start_row + 3}', f'B{start_row + 4}', f'A{start_row + 5}', f'B{start_row + 5}', f'C{start_row + 5}', f'D{start_row + 3}', f'D{start_row + 4}']):
                            worksheet[cell_address].font = label_font 
                        else:
                            worksheet[cell_address].font = data_font 
                            
                        worksheet[cell_address].alignment = Alignment(vertical='center')
                        
                    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                    if 'photo' in self.current_data:
                        try:
                            image_stream = io.BytesIO(self.current_data['photo'])
                            img = OpenpyxlImage(image_stream)
                            img.width = 110 ; 
                            img.height = 130
                            worksheet.add_image(img, f'F{start_row + 1}')

                            if 'captured_face_photo' in self.current_data: 
                                capture_image_stream = io.BytesIO(self.current_data['captured_face_photo'])
                                capture_img = OpenpyxlImage(capture_image_stream)
                                capture_img.width = 110 ; capture_img.height = 130 
                                worksheet.add_image(capture_img, f'H{start_row + 1}')
                        except Exception as e:
                            print(f"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Excel: {e}")

                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                    worksheet.column_dimensions['A'].width = 16.25 
                    worksheet.column_dimensions['B'].width = 12.33 
                    worksheet.column_dimensions['C'].width = 48.67
                    worksheet.column_dimensions['D'].width = 16.00
                    worksheet.column_dimensions['E'].width = 23.22
                    worksheet.column_dimensions['F'].width = 14.22
                    worksheet.column_dimensions['G'].width = 3 
                    worksheet.column_dimensions['H'].width = 18.00
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
                    workbook.save(filepath)
                    excel_success = True
                    
                except Exception as e:
                    excel_success = False
                    if "Permission denied" in str(e) or "being used by another process" in str(e):
                        QMessageBox.critical(self, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏î‡πâ\n‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Excel\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î Excel ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    else:
                        QMessageBox.critical(self, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ: {e}")
                    
            # ---------------- 7. ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ ----------------
            
            # ‡∏•‡πâ‡∏≤‡∏á path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å current_data
            if 'photo_path' in self.current_data:
                del self.current_data['photo_path']

            # ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            save_status_msg = []
            if self.text_file_cb.isChecked():
                save_status_msg.append(f"Text file: {'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if text_success else '‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}")
            if self.excel_file_cb.isChecked():
                save_status_msg.append(f"Excel file: {'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if excel_success else '‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}")
            if self.image_cb.isChecked():
                status = f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({os.path.basename(photo_filepath)})" if image_success else "‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
                save_status_msg.append(f"Image: {status}")
            if self.sqlite_cb.isChecked():
                save_status_msg.append(f"SQLite DB: {'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' if sqlite_success else '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}")
            
            if save_status_msg:
                self.save_button.setEnabled(False)
                QMessageBox.information(self, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                                        f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á CID **{self.current_data['cid']}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß:\n\n"
                                        + "\n".join(save_status_msg))
            else:
                QMessageBox.information(self, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

    # ------------------- Clear & Exit -------------------
    def clear_data(self):
        """Clear all displayed data and photo"""
        self.cid_label.setText("‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô :")
        self.name_th_label.setText("‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• :")
        self.name_en_label.setText("‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (Eng) :")
        self.birth_th_label.setText("‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡πÑ‡∏ó‡∏¢) :")
        self.birth_en_label.setText("‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (Eng) :")
        self.gender_label.setText("‡πÄ‡∏û‡∏® :")
        self.issue_date_label.setText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ :")
        self.issue_date_en_label.setText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ (Eng) :")
        self.expire_date_label.setText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ :")
        self.expire_date_en_label.setText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Eng) :")
        self.issuer_label.setText("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£ :")
        self.address_label.setText("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà :")
        self.photo_label.clear()
        self.photo_label.setText("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
        self.request_number_label.setText("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£ :")
        
        # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        self.current_data = {}
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        self.face_verify_status.setText("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        self.face_verify_status.setStyleSheet("""
            font-size: 14px;
            font-weight: bold;
            color: #6B7280;
            padding: 10px;
        """)
        self.face_progress.setVisible(False)
        self.face_progress.setValue(0)
        
        # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        self.captured_face_frame = None
        self.is_face_scan_mode = False
        
        # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        self.save_button.setEnabled(False)
        self.scan_face_button.setEnabled(False)
        
        print("Data cleared")
        
    def cleanup_resources(self):
        """Complete cleanup of all resources"""
        print("Starting cleanup...")
        
        # Stop timer
        try:
            if hasattr(self, 'timer') and self.timer.isActive():
                self.timer.stop()
                print("Timer stopped")
        except Exception as e:
            print(f"Error stopping timer: {e}")
        
        # Disconnect card
        try:
            self.disconnect_card()
        except Exception as e:
            print(f"Error disconnecting card: {e}")
        
        # Remove card observer
        try:
            if hasattr(self, 'cardmonitor') and hasattr(self, 'cardobserver'):
                self.cardmonitor.deleteObserver(self.cardobserver)
                print("Card observer removed")
        except Exception as e:
            print(f"Error removing card observer: {e}")
        
        print("Cleanup completed")

    def exit_application(self):
        self.disconnect_card()
        self.cardmonitor.deleteObserver(self.cardobserver)
        QApplication.quit()
        
    def closeEvent(self, event):
        """Clean up when closing the application"""
        try:
            self.cleanup_resources()
            print("Application closed successfully")
            event.accept()
            
        except Exception as e:
            print(f"Error during close: {e}")
            event.accept()

    def start_webcam(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°"""
        if self.camera is None:
            self.camera = cv2.VideoCapture(0)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 0 (‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å)
            self.webcam_running = True
        if self.camera.isOpened():
            self.webcam_timer.start(30)
            if self.webcam_label is not None:
               self.webcam_label.setText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...")            
            print("Webcam started.")
        else:
            if self.webcam_label is not None:
                self.webcam_label.setText("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á")
            QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡πÑ‡∏î‡πâ")
            self.camera = None
            self.webcam_running = False # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

    def stop_webcam(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°"""
        if self.webcam_timer.isActive():
            self.webcam_timer.stop()
        
        if self.camera is not None:
            self.camera.release()
            self.camera = None
            print("Webcam stopped.")
            
        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.webcam_label.setText("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        self.webcam_label.setPixmap(QPixmap()) # ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Label

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç scan_and_compare_face() - ‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
    def scan_and_compare_face(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô webcam_label"""
        
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡πà‡∏≠‡∏ô
        if not self.current_data:
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£", 
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            return
            
        if 'photo' not in self.current_data:
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£", 
                "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            return
        
        if self.camera is None:
            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            self.camera = cv2.VideoCapture(0)
            if not self.camera.isOpened():
                QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                    "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                self.camera = None
                return
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            self.is_face_scan_mode = True
            self.captured_face_frame = None
            self.webcam_timer.start(30)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 1 ‡πÄ‡∏õ‡πá‡∏ô 30 milliseconds
            
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°
            self.scan_face_button.setText("Capture")
            print("‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ - ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢")
            
        elif not self.is_face_scan_mode:
            # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            self.is_face_scan_mode = True
            self.captured_face_frame = None
            self.scan_face_button.setText("Capture")
            print("‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤")
            
        else:
            # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            if self.captured_face_frame is not None:
                # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                self.is_face_scan_mode = False
                
                print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤...")
                
                # ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                self.compare_faces(self.captured_face_frame, self.face_cascade)
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                self.captured_face_frame = None
                self.scan_face_button.setText("Face scan")
            else:
                QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤", 
                    "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                
    def put_thai_text(image_bgr, text, position=(10, 30), font_size=28, color=(0, 255, 0)):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏•‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û OpenCV ‡∏î‡πâ‡∏ß‡∏¢ PIL"""
        # ‡πÅ‡∏õ‡∏•‡∏á OpenCV image (BGR) -> PIL (RGB)
        img_pil = Image.fromarray(cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(img_pil)

        # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô THSarabunNew.ttf)
        font = ImageFont.truetype("THSarabunNew.ttf", font_size)

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        draw.text(position, text, font=font, fill=color)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô OpenCV (BGR)
        return cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç update_frame() - ‡πÉ‡∏ä‡πâ Haar Cascade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time (‡πÄ‡∏£‡πá‡∏ß)
    def update_frame(self):
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô webcam_label"""
        if self.camera is None or not self.camera.isOpened():
            return

        ret, frame = self.camera.read()
        if not ret:
            return
        
        display_frame = frame.copy()
        
        if self.is_face_scan_mode:
            
            if self.face_cascade is None or self.face_cascade.empty():
                print("Face detection disabled: Haar Cascade model not loaded correctly.")
                self.is_face_scan_mode = False
                return
                
            try:
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                
                faces = self.face_cascade.detectMultiScale(
                    gray, 
                    scaleFactor=1.3, 
                    minNeighbors=5,
                    minSize=(30, 30)
                )
                
                for (x, y, w, h) in faces:
                    cv2.rectangle(display_frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
                    cv2.putText(display_frame, "Face Detected", (x, y-10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                
                if len(faces) > 0:
                    cv2.putText(display_frame, "Click 'Capture' button to take photo", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                    self.captured_face_frame = frame.copy()
                else:
                    cv2.putText(display_frame, "No face detected - Please face camera", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
                    self.captured_face_frame = None
                    
            except Exception as e:
                print(f"Face detection error: {e}")
        
        frame_rgb = cv2.cvtColor(display_frame, cv2.COLOR_BGR2RGB)
        h, w, ch = frame_rgb.shape
        bytes_per_line = ch * w
        qt_image = QImage(frame_rgb.data, w, h, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_image)
        
        pixmap = pixmap.scaled(
            self.webcam_label.size(), 
            Qt.KeepAspectRatio, 
            Qt.SmoothTransformation
        )
        
        self.webcam_label.setPixmap(pixmap)
 

    def init_db(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS id_card_records (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    record_timestamp TEXT NOT NULL,
                    scan_timestamp TEXT,
                    cid TEXT NOT NULL,
                    name_th TEXT,
                    name_en TEXT,
                    gender TEXT,
                    birth_date TEXT,
                    issue_date TEXT,
                    expire_date TEXT,
                    issuer TEXT,
                    address TEXT,
                    request_number TEXT,
                    card_photo BLOB,                    
                    captured_face_photo BLOB,           
                    photo_saved_path TEXT,              
                    face_verified INTEGER DEFAULT 0
                )
            """)
            conn.commit()
            conn.close()
            print(f"SQLite Database initialized at: {self.db_name}")
        except Exception as e:
            QMessageBox.critical(self, "SQLite Error", 
                                f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite ‡πÑ‡∏î‡πâ: {e}")

    def save_to_sqlite(self, data, face_verified_status):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"""
        if not data.get('cid'):
            return False

        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô binary (BLOB)
            card_photo_blob = data.get('photo', None)
            
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô binary (BLOB)
            captured_photo_blob = data.get('captured_face_photo', None)
            
            # ‡πÄ‡∏Å‡πá‡∏ö path ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ (optional)
            photo_path = data.get('photo_path', '')
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            record_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            scan_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            record = (
                record_time,
                scan_time,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πÅ‡∏Å‡∏ô
                data.get('cid', ''),
                data.get('name_th', ''),
                data.get('name_en', ''),
                data.get('gender', ''),
                data.get('birth_th', ''), 
                data.get('issue_date', ''),
                data.get('expire_date', ''),
                data.get('issuer', ''),
                data.get('address', ''),
                data.get('request_number', ''),
                card_photo_blob,
                captured_photo_blob,
                photo_path,
                face_verified_status
            )

            # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å INSERT OR REPLACE ‡πÄ‡∏õ‡πá‡∏ô INSERT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            cursor.execute("""
                INSERT INTO id_card_records (
                    record_timestamp, scan_timestamp, cid, name_th, name_en, gender, birth_date, 
                    issue_date, expire_date, issuer, address, request_number, 
                    card_photo, captured_face_photo, photo_saved_path, face_verified
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, record)
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CID: {data.get('cid')} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {cursor.lastrowid} ‡πÄ‡∏ß‡∏•‡∏≤: {scan_time}")
            return True
            
        except Exception as e:
            print(f"SQLite save error: {e}")
            QMessageBox.critical(self, "SQLite Error", 
                                f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return False
    
# ‚úÖ ‡∏ß‡∏≤‡∏á resizeEvent ‡πÅ‡∏•‡∏∞ update_fonts ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏ô‡∏≠‡∏Å __init__)
    def resizeEvent(self, event):
        """‡∏õ‡∏£‡∏±‡∏ö font size ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ resize ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á"""
        super().resizeEvent(event)
        
        if not self.ui_ready:
            return
        
        current_width = self.width()
        current_height = self.height()
        
        width_scale = current_width / self.base_width
        height_scale = current_height / self.base_height
        scale_factor = min(width_scale, height_scale)
        
        new_font_size = max(10, int(self.base_font_size * scale_factor))
        self.update_fonts(new_font_size)

    def update_fonts(self, font_size):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï font size ‡∏Ç‡∏≠‡∏á widgets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ widgets ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if not hasattr(self, 'cid_label'):
            return
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï labels ‡∏î‡πâ‡∏ß‡∏¢ stylesheet ‡πÅ‡∏ó‡∏ô setFont
        info_labels = [
            self.cid_label, self.name_th_label, self.name_en_label,
            self.birth_th_label, self.birth_en_label, self.gender_label,
            self.issue_date_label, self.issue_date_en_label,
            self.expire_date_label, self.expire_date_en_label,
            self.issuer_label, self.address_label, self.request_number_label
        ]
        
        for label in info_labels:
            label.setStyleSheet(f"font-family: 'Prompt'; font-size: {font_size}px; color: #333333;")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status labels
        status_size = max(9, int(font_size * 0.85))
        self.reader_label.setStyleSheet(f"font-family: 'Prompt'; font-size: {status_size}px; font-weight: bold;")
        # self.card_label.setStyleSheet(f"font-family: 'Prompt'; font-size: {status_size}px;")
        
 
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GroupBox titles
        group_size = int(font_size * 1.1)
        for widget in self.findChildren(QGroupBox):
            current_style = widget.styleSheet()
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà font-size ‡πÉ‡∏ô stylesheet
            import re
            new_style = re.sub(r'font-size:\s*\d+px', f'font-size: {group_size}px', current_style)
            widget.setStyleSheet(new_style)   

    def open_database_viewer(self):
        '''‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏î‡∏π‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'''
        try:
            if not os.path.exists(self.db_name):
                QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
                                "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
                return
            
            self.db_viewer = DatabaseViewerWindow(db_path=self.db_name, parent=self)
            self.db_viewer.show()
            
        except Exception as e:
            QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                            f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ:\n{str(e)}")

            
    def to_thai_num(num_str):
        mapping = {'0': '‡πê', '1': '‡πë', '2': '‡πí', '3': '‡πì', '4': '‡πî',
                '5': '‡πï', '6': '‡πñ', '7': '‡πó', '8': '‡πò', '9': '‡πô'}
        result = ''.join(mapping.get(digit, digit) for digit in str(num_str))
        return result               
# ------------------- Main -------------------
if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    app.setFont(QFont("Prompt", 12))
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
